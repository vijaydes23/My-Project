import streamlit as st
import pandas as pd
import pickle
from surprise import SVD, Reader, Dataset

# --- рдореЙрдбрд▓ рдФрд░ рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░реЗрдВ ---
@st.cache_resource
def load_data_and_model():
    """рдореЙрдбрд▓, рдореВрд╡реА рдбреЗрдЯрд╛, рдФрд░ рдпреВрдЬрд░ IDs рдХреЛ рдХреИрд╢ (cache) рдореЗрдВ рд▓реЛрдб рдХрд░рддрд╛ рд╣реИред"""
    try:
        # 1. рдкреНрд░рд╢рд┐рдХреНрд╖рд┐рдд SVD рдореЙрдбрд▓ рд▓реЛрдб рдХрд░реЗрдВ
        with open('model/svd_model.pkl', 'rb') as f:
            algo = pickle.load(f)
        
        # 2. рдЖрд╡рд╢реНрдпрдХ рдореВрд╡реА рдФрд░ рд░реЗрдЯрд┐рдВрдЧ рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░реЗрдВ (рдорд╛рди рд▓реАрдЬрд┐рдП рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА training data рдХрд╛ рд╣рд┐рд╕реНрд╕рд╛ рд╕реЗрд╡ рдХрд┐рдпрд╛ рд╣реИ)
        # рдбрд┐рдкреНрд▓реЙрдпрдореЗрдВрдЯ рдХреЗ рд▓рд┐рдП, рдЖрдкрдХреЛ рдЗрди рдлрд╝рд╛рдЗрд▓реЛрдВ рдХреЛ рднреА GitHub рдкрд░ рдбрд╛рд▓рдирд╛ рд╣реЛрдЧрд╛
        movies_df = pd.read_csv('data/movies.csv') 
        ratings_df = pd.read_csv('data/ratings.csv')

        # рдХреЗрд╡рд▓ рд░реЗрдЯрд┐рдВрдЧ рджреЗрдиреЗ рд╡рд╛рд▓реЗ рдпреВрдирд┐рдХ рдпреВрдЬрд░ IDs рдХреА рд▓рд┐рд╕реНрдЯ
        unique_users = sorted(ratings_df['userId'].unique())
        
        # рдореВрд╡реА ID рд╕реЗ рд╢реАрд░реНрд╖рдХ (title) рдореИрдк рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП
        movie_titles = dict(zip(movies_df['movieId'], movies_df['title']))

        return algo, movies_df, movie_titles, unique_users

    except FileNotFoundError as e:
        st.error(f"рдЬрд╝рд░реВрд░реА рдлрд╝рд╛рдЗрд▓реЗрдВ рдирд╣реАрдВ рдорд┐рд▓реАрдВ: {e.filename}. рдбрд┐рдкреНрд▓реЙрдпрдореЗрдВрдЯ рд╕реЗ рдкрд╣рд▓реЗ 'model/svd_model.pkl' рдФрд░ 'data/' рдлрд╝реЛрд▓реНрдбрд░ рдореЗрдВ CSV рдлрд╝рд╛рдЗрд▓реЗрдВ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВред")
        st.stop()
    except Exception as e:
        st.error(f"рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        st.stop()

# рдореЙрдбрд▓ рдФрд░ рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░реЗрдВ
algo, movies_df, movie_titles, unique_users = load_data_and_model()

# --- Streamlit UI ---
st.set_page_config(layout="wide", page_title="рдореВрд╡реА рд░реЗрдЯрд┐рдВрдЧ рдкреНрд░реЗрдбрд┐рдХреНрдЯрд░")
st.title('тнР рдореВрд╡реА рд░реЗрдЯрд┐рдВрдЧ рдкреНрд░реЗрдбрд┐рдХреНрд╢рди (Collaborative Filtering)')
st.markdown("рдпрд╣ рдореЙрдбрд▓ **SVD (Singular Value Decomposition)** рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЕрдиреБрдорд╛рди рд▓рдЧрд╛рддрд╛ рд╣реИ рдХрд┐ рдПрдХ рдпреВрдЬрд░ рдХрд┐рд╕реА рдЪрдпрдирд┐рдд рдореВрд╡реА рдХреЛ рдХреНрдпрд╛ рд░реЗрдЯрд┐рдВрдЧ рджреЗрдЧрд╛ред")

st.markdown("---")

# 1. рдпреВрдЬрд░ рд╕рд┐рд▓реЗрдХреНрд╢рди (Sidebar рдореЗрдВ)
st.sidebar.header("рдпреВрдЬрд░ рдФрд░ рдореВрд╡реА рдЪреБрдиреЗрдВ")
selected_user_id = st.sidebar.selectbox(
    '1. рдпреВрдЬрд░ ID рдЪреБрдиреЗрдВ:',
    unique_users,
    index=0
)

# 2. рдореВрд╡реА рд╕рд┐рд▓реЗрдХреНрд╢рди (Dropdown)
movie_list = sorted(movies_df['title'].tolist())
selected_movie_title = st.sidebar.selectbox(
    '2. рдореВрд╡реА рдХрд╛ рдирд╛рдо рдЪреБрдиреЗрдВ:',
    movie_list,
    index=movie_list.index("Toy Story (1995)") if "Toy Story (1995)" in movie_list else 0
)

# 3. рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдмрдЯрди
if st.sidebar.button('рд░реЗрдЯрд┐рдВрдЧ рдкреНрд░реЗрдбрд┐рдХреНрдЯ рдХрд░реЗрдВ'):
    
    # рдореВрд╡реА ID рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
    try:
        selected_movie_id = movies_df[movies_df['title'] == selected_movie_title]['movieId'].iloc[0]
    except IndexError:
        st.error("рдЪрдпрдирд┐рдд рдореВрд╡реА ID рдбреЗрдЯрд╛ рдореЗрдВ рдирд╣реАрдВ рд╣реИред")
        st.stop()
        
    # SVD рдореЙрдбрд▓ рд╕реЗ рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
    # uid: рдпреВрдЬрд░ ID, iid: рдореВрд╡реА ID, r_ui: рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд░реЗрдЯрд┐рдВрдЧ (None, рдХреНрдпреЛрдВрдХрд┐ рд╣рдо рдкреНрд░реЗрдбрд┐рдХреНрдЯ рдХрд░ рд░рд╣реЗ рд╣реИрдВ)
    prediction = algo.predict(uid=selected_user_id, iid=selected_movie_id, r_ui=None)
    
    # рдЕрдиреБрдорд╛рдирд┐рдд рд░реЗрдЯрд┐рдВрдЧ (Predicted Rating)
    estimated_rating = round(prediction.est, 2)
    
    # --- рдЖрдЙрдЯрдкреБрдЯ рджрд┐рдЦрд╛рдПрдБ ---
    st.subheader("ЁЯТб рд░реЗрдЯрд┐рдВрдЧ рдХрд╛ рдЕрдиреБрдорд╛рдирд┐рдд рдкрд░рд┐рдгрд╛рдо:")
    
    # рд░реЗрдЯрд┐рдВрдЧ рдХреЛ рд░рдВрдЧреАрди рдХрд╛рд░реНрдб рдореЗрдВ рджрд┐рдЦрд╛рдПрдБ
    col1, col2 = st.columns([1, 4])
    with col1:
        st.metric(label=f"рдпреВрдЬрд░ ID: {selected_user_id} рдХреЗ рд▓рд┐рдП", value=f"{estimated_rating} / 5.0")
    
    with col2:
        st.info(f"рдпреВрдЬрд░ **ID {selected_user_id}** рдХреЗ рд▓рд┐рдП, рдореВрд╡реА **'{selected_movie_title}'** рдХреА рдЕрдиреБрдорд╛рдирд┐рдд рд░реЗрдЯрд┐рдВрдЧ рд╣реИ: **{estimated_rating}** (5 рдореЗрдВ рд╕реЗ)ред")

st.markdown("---")
st.caption("рдпрд╣ рдПрдХ рдорд╢реАрди рд▓рд░реНрдирд┐рдВрдЧ рдЖрдзрд╛рд░рд┐рдд рдкреНрд░реЗрдбрд┐рдХреНрд╢рди рд╣реИред рдпрд╣ рдореЙрдбрд▓ рдЙрд╕ рдкреИрдЯрд░реНрди рдкрд░ рдЖрдзрд╛рд░рд┐рдд рд╣реИ рдЬреЛ рдЕрдиреНрдп рд╕рдорд╛рди рдпреВрдЬрд░реНрд╕ рдиреЗ рд╡рд┐рднрд┐рдиреНрди рдореВрд╡реАрдЬрд╝ рдХреЛ рд░реЗрдЯ рдХрд░рддреЗ рд╕рдордп рджрд┐рдЦрд╛рдпрд╛ рд╣реИред")
