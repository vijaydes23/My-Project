import streamlit as st
import pickle
import pandas as pd
import requests

# --- рдлрд╝рдВрдХреНрд╢рди: TMDB API рд╕реЗ рдкреЛрд╕реНрдЯрд░ рдлреЗрдЪ рдХрд░рдирд╛ ---
def fetch_poster(movie_id):
    """TMDB API рд╕реЗ рдореВрд╡реА рдкреЛрд╕реНрдЯрд░ рдХрд╛ URL рдлреЗрдЪ рдХрд░рддрд╛ рд╣реИред"""
    # рдпрд╣рд╛рдБ рдЕрдкрдиреА TMDB API Key рдбрд╛рд▓реЗрдВ
    TMDB_API_KEY = "YOUR_TMDB_API_KEY" # рдЕрдкрдиреА API key рд╕реЗ рдмрджрд▓реЗрдВ
    url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key={TMDB_API_KEY}&language=en-US"
    
    try:
        response = requests.get(url)
        response.raise_for_status() # HTTP errors рдХреЗ рд▓рд┐рдП
        data = response.json()
        
        # poster_path рдЙрдкрд▓рдмреНрдз рд╣реЛрдиреЗ рдкрд░ full URL рдмрдирд╛рдирд╛
        if data.get('poster_path'):
            return "https://image.tmdb.org/t/p/w500/" + data['poster_path']
        else:
            return None # рдЕрдЧрд░ рдкреЛрд╕реНрдЯрд░ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИ
    except requests.exceptions.RequestException as e:
        st.error(f"Error fetching poster: {e}")
        return None

# --- рдлрд╝рдВрдХреНрд╢рди: рд╕рд┐рдлрд╛рд░рд┐рд╢ (Recommendation) рдЬреЗрдирд░реЗрдЯ рдХрд░рдирд╛ ---
def recommend(movie):
    """рдПрдХ рдореВрд╡реА рдХреЗ рд▓рд┐рдП рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ (recommendations) рдЬреЗрдирд░реЗрдЯ рдХрд░рддрд╛ рд╣реИред"""
    # 1. рдореВрд╡реА рдХрд╛ рдЗрдВрдбреЗрдХреНрд╕ (index) рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
    try:
        movie_index = movies[movies['title'] == movie].index[0]
    except IndexError:
        return ["Movie not found in the list."], []
    
    # 2. рд╕рдорд╛рдирддрд╛ рдореИрдЯреНрд░рд┐рдХреНрд╕ (similarity matrix) рд╕реЗ рджреВрд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
    distances = similarity[movie_index]
    
    # 3. рд╕рдмрд╕реЗ рдЬрд╝реНрдпрд╛рджрд╛ рд╕рдорд╛рди (similar) 5 рдореВрд╡реАрдЬрд╝ рдХреЗ рдЗрдВрдбреЗрдХреНрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ (рдЦреБрдж рдХреЛ рдЫреЛрдбрд╝рдХрд░)
    # enumerate() рд╕реЗ рдЗрдВрдбреЗрдХреНрд╕-рджреВрд░реА рдкреЗрдпрд░ рдорд┐рд▓рддреЗ рд╣реИрдВ, рдлрд┐рд░ sort рдХрд░рддреЗ рд╣реИрдВ
    movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]
    
    recommended_movies = []
    recommended_movies_posters = []
    
    for i in movies_list:
        movie_id = movies.iloc[i[0]].movie_id
        
        recommended_movies.append(movies.iloc[i[0]].title)
        
        # 4. рдкреЛрд╕реНрдЯрд░ рдлреЗрдЪ рдХрд░реЗрдВ (рдпрд╛ pre-loaded data рд╕реЗ рд▓реЗрдВ)
        poster_url = fetch_poster(movie_id) # рд▓рд╛рдЗрд╡ API рдХреЙрд▓
        recommended_movies_posters.append(poster_url)
        
    return recommended_movies, recommended_movies_posters

# --- Streamlit рдРрдк рдХрд╛ рд╢реАрд░реНрд╖рдХ рдФрд░ рд▓реЗрдЖрдЙрдЯ ---
st.set_page_config(layout="wide")
st.title('ЁЯОм рдореВрд╡реА рд░реЗрдЯрд┐рдВрдЧ рдФрд░ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдкреНрд░реЗрдбрд┐рдХреНрд╢рди')

# --- рдореЙрдбрд▓ рдФрд░ рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░реЗрдВ ---
# рдзреНрдпрд╛рди рджреЗрдВ: Pickle рдлрд╝рд╛рдЗрд▓реЗрдВ рдЖрдкрдХреЗ GitHub repo рдореЗрдВ 'model/' рдлрд╝реЛрд▓реНрдбрд░ рдореЗрдВ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред
try:
    # 'rb' рдореЛрдб рдореЗрдВ pickle рдлрд╝рд╛рдЗрд▓реЗрдВ рд▓реЛрдб рдХрд░реЗрдВ
    movies_dict = pickle.load(open('model/movies_list.pkl', 'rb'))
    movies = pd.DataFrame(movies_dict)
    
    # рдпрджрд┐ рдЖрдк рд╕рдорд╛рдирддрд╛ рдореИрдЯреНрд░рд┐рдХреНрд╕ рдХреЛ рднреА рд▓реЛрдб рдХрд░ рд░рд╣реЗ рд╣реИрдВ
    similarity = pickle.load(open('model/similarity_matrix.pkl', 'rb'))
except FileNotFoundError:
    st.error("рдореЙрдбрд▓ рдлрд╝рд╛рдЗрд▓реЗрдВ 'model/' рдлрд╝реЛрд▓реНрдбрд░ рдореЗрдВ рдирд╣реАрдВ рдорд┐рд▓реАрдВред рдХреГрдкрдпрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ 'movies_list.pkl' рдФрд░ 'similarity_matrix.pkl' рдореМрдЬреВрдж рд╣реИрдВред")
    st.stop()
except Exception as e:
    st.error(f"рдлрд╝рд╛рдЗрд▓ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
    st.stop()


# --- UI: рдореВрд╡реА рд╕рд┐рд▓реЗрдХреНрд╢рди ---
selected_movie_name = st.selectbox(
    'рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рдореВрд╡реА рдЪреБрдиреЗрдВ рдЬрд┐рд╕рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдорд┐рд▓реЗрдВрдЧреА:',
    movies['title'].values
)

# --- UI: рд╕рд┐рдлрд╛рд░рд┐рд╢ рдмрдЯрди ---
if st.button('рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рджрд┐рдЦрд╛рдУ'):
    names, posters = recommend(selected_movie_name)
    
    # --- рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдЧреНрд░рд┐рдб рд▓реЗрдЖрдЙрдЯ рдореЗрдВ рджрд┐рдЦрд╛рдУ ---
    if names[0] != "Movie not found in the list.":
        st.subheader(f"рдХреНрдпреЛрдВрдХрд┐ рдЖрдкрдиреЗ '{selected_movie_name}' рдкрд╕рдВрдж рдХреА, рдпреЗ 5 рдлрд┐рд▓реНрдореЗрдВ рдЖрдкрдХреЗ рд▓рд┐рдП рд╣реИрдВ:")
        
        # 5 рдХреЙрд▓рдо рдХрд╛ рд▓реЗрдЖрдЙрдЯ
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.text(names[0])
            if posters[0]:
                st.image(posters[0])
            else:
                st.info("рдкреЛрд╕реНрдЯрд░ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ")

        with col2:
            st.text(names[1])
            if posters[1]:
                st.image(posters[1])
            else:
                st.info("рдкреЛрд╕реНрдЯрд░ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ")

        with col3:
            st.text(names[2])
            if posters[2]:
                st.image(posters[2])
            else:
                st.info("рдкреЛрд╕реНрдЯрд░ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ")

        with col4:
            st.text(names[3])
            if posters[3]:
                st.image(posters[3])
            else:
                st.info("рдкреЛрд╕реНрдЯрд░ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ")

        with col5:
            st.text(names[4])
            if posters[4]:
                st.image(posters[4])
            else:
                st.info("рдкреЛрд╕реНрдЯрд░ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ")
    else:
        st.warning(f"рдорд╛рдлрд╝ рдХрд░рдирд╛, '{selected_movie_name}' рдХреЗ рд▓рд┐рдП рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рдХреЛрдИ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдирд╣реАрдВ рдорд┐рд▓ рдкрд╛рдИред")

# --- рдлреБрдЯрд░ ---
st.markdown("---")
st.caption("рдпрд╣ рдкреНрд░реЛрдЬреЗрдХреНрдЯ Content-Based Filtering рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдореВрд╡реА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдЬреЗрдирд░реЗрдЯ рдХрд░рддрд╛ рд╣реИред")
